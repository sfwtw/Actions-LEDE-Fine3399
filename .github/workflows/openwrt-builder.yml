#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
    types: [Source-Code-Update]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && 'manual' || 'auto' }}  # 改用英文
  TZ: Asia/Shanghai
  RELEASE_TAG: 'Lede-Releases'  # 添加固定tag名称
  CACHE_VERSION: "lede"  # 用于缓存版本控制
  FIRMWARE_PREFIX: 'lede'  # 固件前缀
  # 添加固定序号变量
  VERSION_LATEST: '001'
  VERSION_PREVIOUS: '002' 
  VERSION_OLDEST: '003'
  ARTIFACT_DIR: './firmware_archives'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 准备完成
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/ubuntu-22.04)
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th
        df -hT $PWD

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
    
        
    - name: 缓存提交信息
      uses: actions/cache@v3
      if: steps.compile.outputs.status == 'success' && !cancelled()
      with:
        path: |
          .cache/updates_1.txt
          .cache/updates_2.txt
          .cache/updates_3.txt
          .cache/last_commit.txt
        key: commit-cache-${{ env.CACHE_VERSION }}-${{ github.run_id }}
        restore-keys: |
          commit-cache-${{ env.CACHE_VERSION }}-

    - name: 检查更新状态
      id: check_update
      run: |
        mkdir -p .cache
        echo "::group::检查代码仓库"
        cd openwrt
        
        # 获取最新提交
        git fetch origin $REPO_BRANCH
        current_commit=$(git rev-parse origin/$REPO_BRANCH)
        echo "当前最新提交: ${current_commit}"
        
        # 读取或初始化上次构建的提交记录
        if [ -f ../.cache/last_commit.txt ]; then
          last_commit=$(cat ../.cache/last_commit.txt)
          echo "上次构建的提交: ${last_commit}"
          
          # 检查提交是否相同
          if [ "$last_commit" = "$current_commit" ]; then
            echo "没有检测到新的提交"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          echo "首次运行，使用HEAD^作为比较基准"
          last_commit=$(git rev-parse HEAD^)
          echo "使用上一次提交: ${last_commit}"
        fi
        
        # 处理更新记录
        echo "检测到更新，处理更新记录"
        # 转移历史更新记录
        if [ -f ../.cache/updates_2.txt ]; then
          mv ../.cache/updates_2.txt ../.cache/updates_3.txt
        fi
        if [ -f ../.cache/updates_1.txt ]; then
          mv ../.cache/updates_1.txt ../.cache/updates_2.txt
        fi
        
        # 生成新的更新记录
        {
          echo "编译时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "编译类型: ${BUILD_TYPE}"
          echo "更新内容:"
          git log --format='%H|%h|%s|%an|%at' $last_commit..$current_commit
        } > ../.cache/updates_1.txt
        
        # 确认更新记录生成后，更新最后构建的提交记录
        echo "${current_commit}" > ../.cache/last_commit.txt
        echo "已更新 last_commit 到: ${current_commit}"
        echo "has_updates=true" >> $GITHUB_OUTPUT
    
    - name: 缓存构建动作
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ubuntu-22.04-fine3399-lede
        prefix: ${{ github.workspace }}/openwrt

    - name: 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 加载补丁
      run: |
        if [ -d patches ]; then
          echo "发现补丁目录，开始应用补丁..."
          cd openwrt
          git apply --reject --whitespace=fix $GITHUB_WORKSPACE/patches/*.patch
        else
          echo "未发现补丁目录，跳过补丁应用步骤"
        fi

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || {
          echo "多线程编译失败，尝试单线程编译"
          make -j1 V=s || {
            echo "编译失败"
            exit 1
          }
        }
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # 添加构建状态检查
    - name: 检查构建状态
      if: steps.compile.outputs.status != 'success'
      run: |
        echo "构建失败，请检查日志"
        exit 1

    - name: 检查磁盘空间
      if: (!cancelled())
      run: |
        df -hT
        df -hT $PWD

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 下载已有固件
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        mkdir -p ${{ env.ARTIFACT_DIR }}
        # 尝试下载现有版本
        gh release download ${{ env.RELEASE_TAG }} -D ${{ env.ARTIFACT_DIR }} || true
      env:
        GH_TOKEN: ${{ secrets.TOKEN }}

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        set -e  # 添加错误检查
        
        # 保存当前路径用于后续操作
        CURRENT_PATH=$(pwd)
        
        # 进入目标目录并记录路径
        cd openwrt/bin/targets/*/*
        TARGET_PATH=$(pwd)
        echo "当前工作目录: ${TARGET_PATH}"
        rm -rf packages
        
        # 创建新版本目录并打包
        NEW_VERSION="${FIRMWARE_PREFIX}_${VERSION_LATEST}"
        mkdir -p $NEW_VERSION
        mv * $NEW_VERSION/ 2>/dev/null || true
        zip -r "firmware_new.zip" $NEW_VERSION/
        if [ ! -f "firmware_new.zip" ]; then
          echo "错误: 打包失败"
          exit 1
        fi
        
        # 移动到统一目录并处理版本轮转
        cd $CURRENT_PATH
        mkdir -p ${{ env.ARTIFACT_DIR }}
        cd ${{ env.ARTIFACT_DIR }}
        
        # 计算现有文件数量并显示
        echo "更新前的文件列表："
        ls -lh *.zip || echo "目录为空"
        
        # 版本轮转（从最老到最新的顺序处理）
        echo "开始版本轮转..."
        
        # 1. 如果存在 002，将其移动到 003
        if [ -f "${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip" ]; then
          echo "移动 002 到 003"
          mv "${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip" "${FIRMWARE_PREFIX}_${VERSION_OLDEST}.zip"
        fi
        
        # 2. 如果存在 001，将其移动到 002
        if [ -f "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip" ]; then
          echo "移动 001 到 002"
          mv "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip" "${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip"
        fi
        
        # 3. 放置新版本到 001
        echo "放置新版本到 001"
        cp "${TARGET_PATH}/firmware_new.zip" "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip"
        
        # 显示最终文件列表
        echo "最终文件列表："
        ls -lh *.zip || echo "警告: 没有找到任何固件文件"
        
        # 添加文件完整性检查
        for zip_file in ${{ env.ARTIFACT_DIR }}/*.zip; do
          if [ -f "$zip_file" ]; then
            if ! unzip -t "$zip_file" >/dev/null 2>&1; then
              echo "警告: 文件 $zip_file 可能已损坏"
              rm -f "$zip_file"
            fi
          fi
        done

        echo "FIRMWARE=${{ env.ARTIFACT_DIR }}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成发布说明
      id: release_note
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.organize.outputs.status == 'success'
      run: |
        REPO_OWNER=$(echo $REPO_URL | cut -d'/' -f4)
        REPO_NAME=$(echo $REPO_URL | cut -d'/' -f5 | cut -d'.' -f1)
        
        {
          echo "## 📥 OpenWrt 固件发布"
          echo ""
          echo "### 🔸 版本信息"
          echo "- 当前版本：${FIRMWARE_PREFIX}_${VERSION_LATEST} (最新)"
          if [ -f "${{ env.ARTIFACT_DIR }}/${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip" ]; then
            echo "- 历史版本：${FIRMWARE_PREFIX}_${VERSION_PREVIOUS} (上一版)"
          fi
          if [ -f "${{ env.ARTIFACT_DIR }}/${FIRMWARE_PREFIX}_${VERSION_OLDEST}.zip" ]; then
            echo "           ${FIRMWARE_PREFIX}_${VERSION_OLDEST} (最早版)"
          fi
          echo ""
          echo "### 🔸 编译信息"
          echo "- 编译类型：${BUILD_TYPE}"
          echo "- 编译时间：$(date +"%Y年%m月%d日 %H:%M")"
          echo ""
          echo "### 🔸 更新记录"
          
          # 显示最新版本更新内容
          if [ -f ".cache/updates_1.txt" ]; then
            echo "#### ${FIRMWARE_PREFIX}_${VERSION_LATEST} (最新版本)"
            while IFS= read -r line; do
              if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                continue
              elif [[ $line == "更新内容:" ]]; then
                echo "更新内容："
              else
                if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                  if [ ! -z "$short_hash" ]; then
                    commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                    echo "  - [<code title=\"${full_hash}\">${short_hash}</code>](https://github.com/${REPO_OWNER}/${REPO_NAME}/commit/${full_hash}) ${subject}"
                  fi
                fi
              fi
            done < ".cache/updates_1.txt"
            echo ""
          fi
        
          # 显示上一版本更新内容
          if [ -f ".cache/updates_2.txt" ]; then
            echo "#### ${FIRMWARE_PREFIX}_${VERSION_PREVIOUS} (上一版本)"
            while IFS= read -r line; do
              if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                continue
              elif [[ $line == "更新内容:" ]]; then
                echo "更新内容："
              else
                if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                  if [ ! -z "$short_hash" ]; then
                    commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                    echo "  - [<code title=\"${full_hash}\">${short_hash}</code>](https://github.com/${REPO_OWNER}/${REPO_NAME}/commit/${full_hash}) ${subject}"
                  fi
                fi
              fi
            done < ".cache/updates_2.txt"
            echo ""
          fi
          
          # 显示最早版本更新内容
          if [ -f ".cache/updates_3.txt" ]; then
            echo "#### ${FIRMWARE_PREFIX}_${VERSION_OLDEST} (最早版本)"
            while IFS= read -r line; do
              if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                continue
              elif [[ $line == "更新内容:" ]]; then
                echo "更新内容："
              else
                if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                  if [ ! -z "$short_hash" ]; then
                    commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                    echo "  - [<code title=\"${full_hash}\">${short_hash}\"></code>](https://github.com/${REPO_OWNER}/${REPO_NAME}/commit/${full_hash}) ${subject}"
                  fi
                fi
              fi
            done < ".cache/updates_3.txt"
            echo ""
          fi
          
          echo "### 📝 说明事项"
          echo "- 此固件仅供测试使用，风险自负"
          echo "- 固件版本号说明："
          echo "  * _001：最新编译版本"
          echo "  * _002：上一次编译版本"
          echo "  * _003：最早保留版本"
        } > release.txt

    - name: 发布固件
      uses: ncipollo/release-action@main
      if: steps.release_note.outputs.status != 'failed' && !cancelled()
      with:
        token: ${{ secrets.TOKEN }}
        tag: ${{ env.RELEASE_TAG }}
        bodyFile: release.txt
        artifacts: "${{ env.ARTIFACT_DIR }}/*.zip"
        allowUpdates: true
        removeArtifacts: true
        replacesArtifacts: true

    - name: 发送构建通知
      if: always()
      run: |
        if [ "${{ steps.compile.outputs.status }}" = "success" ]; then
          echo "✅ 构建成功"
        else
          echo "❌ 构建失败"
        fi

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
