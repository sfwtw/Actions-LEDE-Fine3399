#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: test OpenWrt Builder

on:
  repository_dispatch:
    types: [test]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/sfwtw/Actions-LEDE-Fine3399
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && 'manual' || 'auto' }}  # 改用英文
  TZ: Asia/Shanghai
  RELEASE_TAG: 'OpenWrt-Releases'  # 添加固定tag名称
  CACHE_VERSION: "v1"  # 用于缓存版本控制
  FIRMWARE_PREFIX: 'openwrt'  # 固件前缀
  # 添加固定序号变量
  VERSION_LATEST: '001'
  VERSION_PREVIOUS: '002' 
  VERSION_OLDEST: '003'
  ARTIFACT_DIR: './firmware_archives'
 
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 准备工作环境
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: 缓存提交信息
      uses: actions/cache@v3
      with:
        path: |
          .cache/updates_1.txt
          .cache/updates_2.txt
          .cache/updates_3.txt
          .cache/last_commit.txt
        key: commit-cache-${{ env.CACHE_VERSION }}-${{ github.run_id }}
        restore-keys: |
          commit-cache-${{ env.CACHE_VERSION }}-

    - name: 检查更新状态
      id: check_update
      run: |
        mkdir -p .cache
        echo "::group::克隆代码仓库"
        git clone --depth 100 $REPO_URL -b $REPO_BRANCH repo
        cd repo
        
        # 获取最新提交
        git fetch origin $REPO_BRANCH
        current_commit=$(git rev-parse origin/$REPO_BRANCH)
        echo "当前最新提交: ${current_commit}"
        
        # 读取或初始化上次构建的提交记录
        if [ -f ../.cache/last_commit.txt ]; then
          last_commit=$(cat ../.cache/last_commit.txt)
          echo "上次构建的提交: ${last_commit}"
          
          # 检查提交是否相同
          if [ "$last_commit" = "$current_commit" ]; then
            echo "没有检测到新的提交"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        else
          echo "首次运行，使用HEAD^作为比较基准"
          last_commit=$(git rev-parse HEAD^)
          echo "使用上一次提交: ${last_commit}"
        fi
        
        # 处理更新记录
        echo "检测到更新，处理更新记录"
        # 转移历史更新记录
        if [ -f ../.cache/updates_2.txt ]; then
          mv ../.cache/updates_2.txt ../.cache/updates_3.txt
        fi
        if [ -f ../.cache/updates_1.txt ]; then
          mv ../.cache/updates_1.txt ../.cache/updates_2.txt
        fi
        
        # 生成新的更新记录
        {
          echo "编译时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "编译类型: ${BUILD_TYPE}"
          echo "更新内容:"
          git log --format='%H|%h|%s|%an|%at' $last_commit..$current_commit
        } > ../.cache/updates_1.txt
        
        # 确认更新记录生成后，更新最后构建的提交记录
        echo "${current_commit}" > ../.cache/last_commit.txt
        echo "已更新 last_commit 到: ${current_commit}"
        echo "has_updates=true" >> $GITHUB_OUTPUT

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th
        df -hT $PWD

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        mkdir openwrt
        mkdir openwrt/bin
        mkdir openwrt/bin/targets
        mkdir openwrt/bin/targets/cs
        mkdir openwrt/bin/targets/cs/cs
        echo "test" >> openwrt/bin/targets/cs/cs/test.txt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
    


    - name: 检查磁盘空间
      if: (!cancelled())
      run: |
        df -hT
        df -hT $PWD

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 下载已有固件
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        mkdir -p ${{ env.ARTIFACT_DIR }}
        # 尝试下载现有版本
        gh release download ${{ env.RELEASE_TAG }} -D ${{ env.ARTIFACT_DIR }} || true
      env:
        GH_TOKEN: ${{ secrets.TOKEN }}

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        # 保存当前路径用于后续操作
        CURRENT_PATH=$(pwd)
        
        # 进入目标目录并记录路径
        cd openwrt/bin/targets/*/*
        TARGET_PATH=$(pwd)
        echo "当前工作目录: ${TARGET_PATH}"
        rm -rf packages
        
        # 创建新版本目录并打包
        NEW_VERSION="${FIRMWARE_PREFIX}_${VERSION_LATEST}"
        mkdir -p $NEW_VERSION
        mv * $NEW_VERSION/ 2>/dev/null || true
        zip -r "firmware_new.zip" $NEW_VERSION/
        if [ ! -f "firmware_new.zip" ]; then
          echo "错误: 打包失败"
          exit 1
        fi
        
        # 移动到统一目录并处理版本轮转
        cd $CURRENT_PATH
        mkdir -p ${{ env.ARTIFACT_DIR }}
        cd ${{ env.ARTIFACT_DIR }}
        
        # 备份现有文件
        if [ -f "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip" ]; then
          echo "备份当前版本"
          cp "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip" "${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip"
        fi
        
        # 移动新编译的固件
        echo "移动新固件"
        cp "${TARGET_PATH}/firmware_new.zip" "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip"
        
        # 如果存在第二个版本，将其移动到第三个版本
        if [ -f "${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip" ] && [ -f "${FIRMWARE_PREFIX}_${VERSION_LATEST}.zip" ]; then
          echo "移动旧版本"
          mv "${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip" "${FIRMWARE_PREFIX}_${VERSION_OLDEST}.zip"
        fi
        
        # 清理临时文件
        rm -f firmware_new.zip
        
        # 列出最终的文件并验证
        echo "最终文件列表："
        ls -lh *.zip || echo "警告: 没有找到任何固件文件"
        
        echo "FIRMWARE=${{ env.ARTIFACT_DIR }}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成发布说明
      id: release_note
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.organize.outputs.status == 'success'
      run: |
        REPO_OWNER=$(echo $REPO_URL | cut -d'/' -f4)
        REPO_NAME=$(echo $REPO_URL | cut -d'/' -f5 | cut -d'.' -f1)
        
        {
          echo "## 📥 OpenWrt 固件发布"
          echo ""
          echo "### 🔸 版本信息"
          echo "- 当前版本：${FIRMWARE_PREFIX}_${VERSION_LATEST} (最新)"
          if [ -f "${{ env.ARTIFACT_DIR }}/${FIRMWARE_PREFIX}_${VERSION_PREVIOUS}.zip" ]; then
            echo "- 历史版本：${FIRMWARE_PREFIX}_${VERSION_PREVIOUS} (上一版)"
          fi
          if [ -f "${{ env.ARTIFACT_DIR }}/${FIRMWARE_PREFIX}_${VERSION_OLDEST}.zip" ]; then
            echo "           ${FIRMWARE_PREFIX}_${VERSION_OLDEST} (最早版)"
          fi
          echo ""
          echo "### 🔸 编译信息"
          echo "- 编译类型：${BUILD_TYPE}"
          echo "- 编译时间：$(date +"%Y年%m月%d日 %H:%M")"
          echo ""
          echo "### 🔸 更新记录"
          
          # 显示最新版本更新内容
          if [ -f ".cache/updates_1.txt" ]; then
            echo "#### ${FIRMWARE_PREFIX}_${VERSION_LATEST} (最新版本)"
            while IFS= read -r line; do
              if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                continue
              elif [[ $line == "更新内容:" ]]; then
                echo "更新内容："
              else
                if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                  if [ ! -z "$short_hash" ]; then
                    commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                    echo "  - [<code title=\"${full_hash}\">${short_hash}</code>](https://github.com/${REPO_OWNER}/${REPO_NAME}/commit/${full_hash}) ${subject}"
                  fi
                fi
              fi
            done < ".cache/updates_1.txt"
            echo ""
          fi
          
          # 显示上一版本更新内容
          if [ -f ".cache/updates_2.txt" ]; then
            echo "#### ${FIRMWARE_PREFIX}_${VERSION_PREVIOUS} (上一版本)"
            while IFS= read -r line; do
              if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                continue
              elif [[ $line == "更新内容:" ]]; then
                echo "更新内容："
              else
                if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                  if [ ! -z "$short_hash" ]; then
                    commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                    echo "  - [<code title=\"${full_hash}\">${short_hash}</code>](https://github.com/${REPO_OWNER}/${REPO_NAME}/commit/${full_hash}) ${subject}"
                  fi
                fi
              fi
            done < ".cache/updates_2.txt"
            echo ""
          fi
          
          # 显示最早版本更新内容
          if [ -f ".cache/updates_3.txt" ]; then
            echo "#### ${FIRMWARE_PREFIX}_${VERSION_OLDEST} (最早版本)"
            while IFS= read -r line; do
              if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                continue
              elif [[ $line == "更新内容:" ]]; then
                echo "更新内容："
              else
                if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                  if [ ! -z "$short_hash" ]; then
                    commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                    echo "  - [<code title=\"${full_hash}\">${short_hash}</code>](https://github.com/${REPO_OWNER}/${REPO_NAME}/commit/${full_hash}) ${subject}"
                  fi
                fi
              fi
            done < ".cache/updates_3.txt"
            echo ""
          fi
          
          echo "### 📝 说明事项"
          echo "- 此固件仅供测试使用，风险自负"
          echo "- 固件版本号说明："
          echo "  * _001：最新编译版本"
          echo "  * _002：上一次编译版本"
          echo "  * _003：最早保留版本"
        } > release.txt

    - name: 发布固件
      uses: ncipollo/release-action@main
      if: steps.release_note.outputs.status != 'failed' && !cancelled()
      with:
        token: ${{ secrets.TOKEN }}
        tag: ${{ env.RELEASE_TAG }}
        bodyFile: release.txt
        artifacts: "${{ env.ARTIFACT_DIR }}/*.zip"
        allowUpdates: true
        removeArtifacts: true
        replacesArtifacts: true

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
