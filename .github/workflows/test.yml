#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: test OpenWrt Builder

on:
  repository_dispatch:
    types: [test]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/sfwtw/Actions-LEDE-Fine3399
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
 
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 准备工作环境
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: 缓存提交信息
      uses: actions/cache@v3
      with:
        path: |
          .cache/last_commit.txt
          .cache/commit_log.txt
          .cache/commit_details.txt
        key: commit-cache-${{ github.sha }}-${{ steps.check_update.outputs.commit_count }}
        restore-keys: |
          commit-cache-${{ github.sha }}-
          commit-cache-

    - name: 检查更新状态
      id: check_update
      run: |
        mkdir -p .cache
        echo "::group::克隆代码仓库"
        git clone --depth 100 $REPO_URL -b $REPO_BRANCH repo
        cd repo
        
        current_commit=$(git rev-parse HEAD)
        echo "当前最新提交: ${current_commit}"
        
        # 检查触发来源
        if [ -f ../.cache/trigger_source.txt ] && [ "$(cat ../.cache/trigger_source.txt)" == "cs_checker" ]; then
          echo "由cs检查器触发的构建，跳过更新检测"
          rm -f ../.cache/trigger_source.txt  # 清除标记
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "commit_count=1" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 获取缓存的提交记录
        if [ -f ../.cache/last_commit.txt ]; then
          last_commit=$(cat ../.cache/last_commit.txt)
          echo "上次构建的提交: ${last_commit}"
        else
          # 首次运行，获取最近一次提交的父提交
          last_commit=$(git rev-parse HEAD^)
          echo "首次运行，使用上一次提交: ${last_commit}"
          echo "${last_commit}" > ../.cache/last_commit.txt
        fi
        echo "::endgroup::"
        
        # 确保有变更时才保存日志
        if [ "$last_commit" != "$current_commit" ]; then
          echo "::group::获取更新信息"
          # 保存提交日志
          git log --pretty=format:'%h: %s' $last_commit..$current_commit > ../.cache/commit_log.txt
          # 保存完整提交信息
          git log --format='%H|%h|%s|%an|%at' $last_commit..$current_commit > ../.cache/commit_details.txt
          # 更新最后提交记录
          echo "${current_commit}" > ../.cache/last_commit.txt
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "commit_count=$(git rev-list --count $last_commit..$current_commit)" >> $GITHUB_OUTPUT
          echo "::endgroup::"
        else
          echo "没有检测到新的提交"
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "commit_count=0" >> $GITHUB_OUTPUT
        fi

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th
        df -hT $PWD

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        mkdir openwrt
        mkdir openwrt/bin
        mkdir openwrt/bin/targets
        mkdir openwrt/bin/targets/cs
        mkdir openwrt/bin/targets/cs/cs
        echo "test" >> openwrt/bin/targets/cs/cs/test.txt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
    


    - name: 检查磁盘空间
      if: (!cancelled())
      run: |
        df -hT
        df -hT $PWD

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.organize.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        {
          echo "📥 固件说明"
          echo "🔺 此固件为自动编译"
          echo "🔺 发布时间: $(date +"%Y年%m月%d日 %H点%M分")"
          
          if [ -f .cache/commit_details.txt ]; then
            echo "🔺 最新更新内容:"
            echo "-------------------"
            while IFS='|' read -r full_hash short_hash subject author timestamp; do
              date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M")
              echo "- [$short_hash] $subject"
              echo "  作者: $author"
              echo "  时间: $date"
            done < .cache/commit_details.txt
            echo "-------------------"
          fi
          
          echo "🔺 仅供测试使用，风险自负"
          echo "---"
          [ ${UPLOAD_GOFILE:-false} = true ] && echo "🔗 [GoFile下载](${{ steps.gofile.outputs.url }})"
        } > release.txt
        
        echo "::group::Release Content"
        cat release.txt
        echo "::endgroup::"
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.tag.outputs.status == 'success'
      with:
        keep_latest: 2
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
