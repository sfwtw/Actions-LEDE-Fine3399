#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: test OpenWrt Builder

on:
  repository_dispatch:
    types: [test]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/sfwtw/Actions-LEDE-Fine3399
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  BUILD_TYPE: ${{ github.event_name == 'workflow_dispatch' && 'manual' || 'auto' }}  # 改用英文
  TZ: Asia/Shanghai
  RELEASE_TAG: 'OpenWrt-Releases'  # 添加固定tag名称
  CACHE_VERSION: "v1"  # 用于缓存版本控制
 
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 准备工作环境
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: 缓存提交信息
      uses: actions/cache@v3
      with:
        path: |
          .cache/updates_1.txt
          .cache/updates_2.txt
          .cache/updates_3.txt
          .cache/last_commit.txt
        key: commit-cache-${{ env.CACHE_VERSION }}-${{ github.sha }}
        restore-keys: |
          commit-cache-${{ env.CACHE_VERSION }}-

    - name: 检查更新状态
      id: check_update
      run: |
        mkdir -p .cache
        echo "::group::克隆代码仓库"
        git clone --depth 100 $REPO_URL -b $REPO_BRANCH repo
        cd repo
        
        current_commit=$(git rev-parse HEAD)
        echo "当前最新提交: ${current_commit}"
        
        if [ -f ../.cache/last_commit.txt ]; then
          last_commit=$(cat ../.cache/last_commit.txt)
          echo "上次构建的提交: ${last_commit}"
        else
          last_commit=$(git rev-parse HEAD^)
          echo "首次运行，使用上一次提交: ${last_commit}"
        fi
        
        # 转移历史更新记录
        if [ -f ../.cache/updates_2.txt ]; then
          mv ../.cache/updates_2.txt ../.cache/updates_3.txt
        fi
        if [ -f ../.cache/updates_1.txt ]; then
          mv ../.cache/updates_1.txt ../.cache/updates_2.txt
        fi
        
        # 生成新的更新记录
        if [ "$last_commit" != "$current_commit" ]; then
          echo "::group::获取更新信息"
          {
            echo "编译时间: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "编译类型: ${BUILD_TYPE}"
            echo "更新内容:"
            git log --format='%H|%h|%s|%an|%at' $last_commit..$current_commit
          } > ../.cache/updates_1.txt
          
          echo "${current_commit}" > ../.cache/last_commit.txt
          echo "has_updates=true" >> $GITHUB_OUTPUT
        else
          echo "没有检测到新的提交"
          echo "has_updates=false" >> $GITHUB_OUTPUT
        fi

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th
        df -hT $PWD

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        mkdir openwrt
        mkdir openwrt/bin
        mkdir openwrt/bin/targets
        mkdir openwrt/bin/targets/cs
        mkdir openwrt/bin/targets/cs/cs
        echo "test" >> openwrt/bin/targets/cs/cs/test.txt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
    


    - name: 检查磁盘空间
      if: (!cancelled())
      run: |
        df -hT
        df -hT $PWD

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        BUILD_DATE=$(date +"%Y%m%d_%H%M")
        FIRMWARE_NAME="openwrt_${BUILD_TYPE}_${BUILD_DATE}"
        
        # 创建打包目录并移动文件
        mkdir -p $FIRMWARE_NAME
        mv * $FIRMWARE_NAME/ 2>/dev/null || true
        
        # 直接在当前目录打包
        zip -r "${FIRMWARE_NAME}.zip" $FIRMWARE_NAME/
        if [ ! -f "${FIRMWARE_NAME}.zip" ]; then
          echo "错误: 打包失败"
          exit 1
        fi
        
        # 验证文件大小
        actual_size=$(stat -f%z "${FIRMWARE_NAME}.zip" 2>/dev/null || stat -c%s "${FIRMWARE_NAME}.zip")
        echo "文件大小: ${actual_size} bytes"
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
        echo "FIRMWARE_NAME=$FIRMWARE_NAME" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成发布说明
      id: release_note
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.organize.outputs.status == 'success'
      run: |
        {
          echo "## 📥 OpenWrt 固件发布"
          echo ""
          echo "### 🔸 编译信息"
          echo "- 编译类型：${BUILD_TYPE}"
          echo "- 编译时间：$(date +"%Y年%m月%d日 %H:%M")"
          echo "- 固件文件：${FIRMWARE_NAME}.zip"
          echo ""
          echo "### 🔸 更新记录"
          
          for i in {1..3}; do
            if [ -f ".cache/updates_${i}.txt" ]; then
              echo "#### 构建 $i"
              while IFS= read -r line; do
                if [[ $line == "编译时间:"* ]] || [[ $line == "编译类型:"* ]]; then
                  echo "- $line"
                elif [[ $line == "更新内容:" ]]; then
                  echo "- 更新内容："
                else
                  if IFS='|' read -r full_hash short_hash subject author timestamp <<< "$line"; then
                    if [ ! -z "$short_hash" ]; then
                      commit_date=$(date -d "@$timestamp" "+%Y-%m-%d %H:%M" 2>/dev/null || echo "未知时间")
                      echo "  - [\`$short_hash\`] $subject ($author - $commit_date)"
                    fi
                  fi
                fi
              done < ".cache/updates_${i}.txt"
              echo ""
            fi
          done
          
          echo "### 📝 注意事项"
          echo "- 此版本仅供测试使用，风险自负"
          echo "- 保留最近3次构建记录"
        } > release.txt

    - name: 发布固件
      uses: ncipollo/release-action@main
      if: steps.release_note.outputs.status != 'failed' && !cancelled()
      with:
        token: ${{ secrets.TOKEN }}
        tag: ${{ env.RELEASE_TAG }}
        bodyFile: release.txt
        artifacts: "${{ env.FIRMWARE }}/${{ env.FIRMWARE_NAME }}.zip"
        allowUpdates: true
        removeArtifacts: false
        replacesArtifacts: true

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: 清理旧固件文件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: false
        delete_tag_pattern: ^(?!OpenWrt-Releases).*$
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
