#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: test OpenWrt Builder

on:
  repository_dispatch:
    types: [test]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 准备完成
      uses: actions/checkout@main

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th
        df -hT $PWD

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        mkdir openwrt
        mkdir openwrt/bin
        mkdir openwrt/bin/targets
        mkdir openwrt/bin/targets/cs
        mkdir openwrt/bin/targets/cs/cs
        echo "${{ github.event.client_payload.commit_msg }}" >> openwrt/bin/targets/cs/cs/test.txt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
    


    - name: 检查磁盘空间
      if: (!cancelled())
      run: |
        df -hT
        df -hT $PWD

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.organize.outputs.status == 'success'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "📥 固件说明" >> release.txt
        echo "🔺 此固件为自动编译" >> release.txt
        echo "🔺 发布时间: $(date +"%Y年%m月%d日 %H点%M分")" >> release.txt
        echo "🔺 提交SHA: ${{ github.event.client_payload.sha }}" >> release.txt
        echo "🔺 仅供测试使用，风险自负" >> release.txt
        echo "---" >> release.txt
        [ ${UPLOAD_GOFILE:-false} = true ] && [ -n "${{ steps.gofile.outputs.url }}" ] && echo "🔗 [GoFile下载](${{ steps.gofile.outputs.url }})" >> release.txt
        if [ -n "${{ github.event.client_payload.commit_msg }}" ]; then
          echo "Debug - Commit message:"
          echo "${{ github.event.client_payload.commit_msg }}" >> release.txt
        fi 
        echo "Debug - Final release.txt content:"
        cat release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && steps.tag.outputs.status == 'success'
      with:
        keep_latest: 2
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
