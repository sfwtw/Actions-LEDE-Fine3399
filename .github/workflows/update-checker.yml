name: Update Checker

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  TZ: Asia/Shanghai
  CACHE_VERSION: "lede"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
    
    steps:
      - name: 准备工作目录
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 缓存提交信息
        id: cache-commit
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: |
            .cache/updates_1.txt
            .cache/updates_2.txt
            .cache/updates_3.txt
            .cache/last_commit.txt
          key: commit-cache-${{ env.CACHE_VERSION }}-${{ github.run_id }}
          restore-keys: |
            commit-cache-${{ env.CACHE_VERSION }}-

      - name: 检查更新
        id: check_updates
        env: 
          GH_TOKEN: ${{ secrets.token }}
        run: |
          set -e
          mkdir -p .cache
          echo "::group::克隆仓库"
          git clone --depth 100 $REPO_URL -b $REPO_BRANCH temp || {
            echo "克隆仓库失败"
            exit 1
          }
          cd temp
          
          # 获取最新提交
          git fetch origin $REPO_BRANCH
          current_commit=$(git rev-parse origin/$REPO_BRANCH)
          echo "当前最新提交: ${current_commit}"
          
          # 读取上次构建的提交记录
          if [ -f ../.cache/last_commit.txt ]; then
            last_commit=$(cat ../.cache/last_commit.txt)
            echo "上次检查的提交: ${last_commit}"
            
            if [ "$last_commit" = "$current_commit" ]; then
              echo "没有检测到新的提交"
              echo "has_updates=false" >> $GITHUB_OUTPUT
            else
              echo "检测到新的更新"
              echo "has_updates=true" >> $GITHUB_OUTPUT
              
              # 使用 gh cli 触发编译工作流
              gh workflow run openwrt-builder.yml -f event_type=Source-Code-Update || {
                echo "触发编译失败，尝试使用 API 方式"
                curl -X POST https://api.github.com/repos/${{ github.repository }}/dispatches \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: token ${{ secrets.TOKEN }}" \
                  -d "{\"event_type\":\"Source-Code-Update\"}" \
                  || echo "触发编译失败，请检查 TOKEN 权限"
              }
            fi
          else
            echo "首次运行,等待 test 工作流初始化"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: 清理工作流记录
        if: always()
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2
